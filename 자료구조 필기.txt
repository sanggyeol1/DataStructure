신장 트리 : 그래프 내의 모든 정점을 포함하는 트리
n개의 정점을 가지는 그래프의 신장트리는 n-1개의 간선을 가짐
최소비용 신장트리(Minimum spanning tree)
 - 네트워크에 있는 모든 정점들을 가장 적은 수의 간선과 비용으로 연결
 - MST 의 응용

Kruskal의 MST알고리즘 
 탐욕적인 방법
	주요 알고리즘 설계 기법
	각 단계에서 최선의 답을 선택하는 과정을 반복함으로써 최종적인 해답에 도달
	탐욕적인 방법은 항상 최적의 해답을 주는 지 검증 필요
	Kruskal MST알고리즘은 최적의 해답 임이 증명됨

union-find알고리즘 : 원소가 어느 집합에 속하는지 알아냄, kruskal의 MST알고리즘에서 
사이클 검사에 사용


prim의 MST알고리즘
	시작 정점에서부터 출발하여 신장 트리 집합을 단계적으로 확장해나감
	신장 트리 집합에 인접한 정점 중에서 최저 간선으로 연결된 정점 선택하여 신장 트리 집합에 추가함

Kruskal알고리즘은 대부분 간선들을 정렬하는 시간에 좌우됨
	사이클 테스트 등의 작업은 정렬에 비해 매우 신속하게 수행됨
	네트워크의 간선 e개를 퀵정렬과 같은 효율적인 알고리즘으로 정렬한다면 Kruskal 알고리즘의 시간복잡도는 O(e*log(e))가 된다.

Prim의 MST알고리즘 복잡도
	주 반복문이 정점의 수n만큼 반복하고, 내부 반복문이n번 반복하므로prim의 알고리즘은 n번 반복하므로 prim의 알고리즘은 O(n2)의 복잡도를 가진다.
	희박한 그래프 : O(e*log(e))인 kruskal알고리즘이 유리
	밀집한 그래프 : O(n2)인 prim알고리즘이 유리함



최단경로 - 네트워크에서 정점 u와 정점v를 연결하는 경로 중에서 간선들의 가중치 합이 최소가 되는 경로
	간선의 가중치는 비용, 거리, 시간 등
Dijkstra알고리즘: 하나의 시작 정점에서 다른 정점까지의 최단경로 계산
Floyd알고리즘: 모든 정점에서 다른 모든 정점까지의 최단 경로를 계산해줌//3차원 알고리즘




탐색이란?
 - 여러 개의 자료 중에서 원하는 자료를 찾는 작업
 - 컴퓨터가 가장 많이 하는 작업 중의 하나.
 - 탐색을 효율적으로 수행하는 것은 매우 중요
 - 탐색키(search key)
	항목과 항목을 구별해주는 키
 - 탐색을 위하여 사용되는 자료 구조 
	배열, 연결리스트, 트리, 그래프 등



충돌해결책 
 - 충돌 : 서로 다른 탐색 키를 갖는 항목들이 같은 해시 주소를 가지는 현상
 - 충돌이 발생하면 해시 테이블에 항목 저장 불가능
 - 충돌을 효과적으로 해결하는 방법 반드시 필요

충돌해결책 
 1. 선형조사법 : 충돌이 일어난 항목을 해시 테이블의 다른 위치에 저장
 2. 체이닝 : 각 버켓에 삽입과 삭제가 용이한 연결 리스트 할당
